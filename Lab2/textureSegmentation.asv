function [outputImageContrast, outputImageEnergy, outputImageHomogeneity, outputImageEntropy, rangeContrast, rangeEnergy, rangeHomogeneity] = textureSegmentation(imageFile, windowSize)

im = imread(imageFile);

%convert to grayscale
im = rgb2gray(im);

%do contrast enhancement
%im = adapthisteq(im);

%blur image
%H = fspecial('disk',2);
%im = imfilter(im,H,'replicate');

[sizeX, sizeY] = size(im);

if (mod(windowSize,2)) == 0
    windowSize = windowSize + 1;
end

%zero-padding
im = padarray(im,[(windowSize-1)/2 (windowSize-1)/2],0);
outputImageEnergy = zeros(size(im));
outputImageContrast = zeros(size(im));
outputImageEntropy = zeros(size(im));
outputImageHomogeneity = zeros(size(im));
rangeEnergy = zeros(size(im));
rangeContrast = zeros(size(im));
rangeEntropy = zeros(size(im));
rangeHomogeneity = zeros(size(im));

for i = (windowSize-1)/2+1:sizeX
    for j = (windowSize-1)/2+1:sizeY     
        localPixel = im(i-(windowSize-1)/2:i+(windowSize-1)/2,j-(windowSize-1)/2:j+(windowSize-1)/2);
        coMatrix = graycomatrix(localPixel, 'Offset', [0 1; -1 0; -1 1; -1 -1], 'Symmetric', true);
        descriptor = graycoprops(coMatrix,'all');
        outputImageEnergy(i,j) = mean(descriptor.Energy);
        outputImageContrast(i,j) = mean(descriptor.Contrast);
        outputImageEntropy(i,j) = mean(descriptor.Correlation);
        outputImageHomogeneity(i,j) = mean(descriptor.Homogeneity);
        rangeEnergy(i,j) = range(descriptor.Energy);
        rangeContrast(i,j) = range(descriptor.Contrast);
        rangeEntropy(i,j) = range(descriptor.Correlation);
        rangeHomogeneity(i,j) = range(descriptor.Homogeneity);
    end
end

%remove padding
outputImageContrast = outputImageContrast((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));
outputImageEntropy = outputImageEntropy((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));
outputImageHomogeneity = outputImageHomogeneity((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));
outputImageEnergy = outputImageEnergy((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));
rangeEnergy = rangeEnergy((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));
rangeContrast = rangeContrast((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));
rangeEntropy = rangeEntropy((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));
rangeHomogeneity = rangeHomogeneity((windowSize-1)/2+1:(end-(windowSize-1)/2), (windowSize-1)/2+1:(end-(windowSize-1)/2));

%normalization of contrast
mmin = min(outputImageContrast(:));
mmax = max(outputImageContrast(:));
outputImageContrast = (outputImageContrast-mmin) ./ (mmax-mmin);
outputImageContrast = uint8(outputImageContrast  * 255);

%normalization of entropy
mmin = min(outputImageEntropy(:));
mmax = max(outputImageEntropy(:));
outputImageEntropy = (outputImageEntropy-mmin) ./ (mmax-mmin);
outputImageEntropy = uint8(outputImageEntropy  * 255);

%normalization of homogeneity
mmin = min(outputImageHomogeneity(:));
mmax = max(outputImageHomogeneity(:));
outputImageHomogeneity = (outputImageHomogeneity-mmin) ./ (mmax-mmin);
outputImageHomogeneity = uint8(outputImageHomogeneity  * 255);

%normalization of energy
mmin = min(outputImageEnergy(:));
mmax = max(outputImageEnergy(:));
outputImageEnergy = (outputImageEnergy-mmin) ./ (mmax-mmin);
outputImageEnergy = uint8(outputImageEnergy  * 255);